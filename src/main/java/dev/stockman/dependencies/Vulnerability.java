package dev.stockman.dependencies;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

public record Vulnerability(String fileName, String name, String severity, BigDecimal cvssv3Score, String description) implements Comparable<Vulnerability> {
    @Override
    public int compareTo(Vulnerability o) {
        if (o == null) return -1; // Null objects are considered greater

        // 1. Compare Severity
        int severityComparison = compareSeverity(this.severity(), o.severity());
        if (severityComparison != 0) {
            return severityComparison;
        }

        // 2. Compare CVSSv3 Scores (Descending, null last)
        int cvssComparison = compareCvssv3Score(this.cvssv3Score(), o.cvssv3Score());
        if (cvssComparison != 0) {
            return cvssComparison;
        }

        // 3. Compare File Name (Alphabetical)
        int fileNameComparison = compareStrings(this.fileName(), o.fileName());
        if (fileNameComparison != 0) {
            return fileNameComparison;
        }

        // 4. Compare Name (Alphabetical)
        int nameComparison = compareStrings(this.name(), o.name());
        if (nameComparison != 0) {
            return nameComparison;
        }

        // 5. Compare Description (Alphabetical)
        return compareStrings(this.description(), o.description());
    }
    private int compareStrings(String str1, String str2) {
        if (str1 == null && str2 == null) {
            return 0; // Both are null
        }
        if (str1 == null) {
            return 1; // Null is after any non-null
        }
        if (str2 == null) {
            return -1; // Non-null comes before null
        }
        return str1.compareTo(str2); // Alphabetical order
    }
    private int compareCvssv3Score(BigDecimal score1, BigDecimal score2) {
        if (score1 == null && score2 == null) {
            return 0; // Both are null
        }
        if (score1 == null) {
            return 1; // Null is after any non-null
        }
        if (score2 == null) {
            return -1; // Non-null comes before null
        }
        return score2.compareTo(score1);
    }
    private int compareSeverity(String severity1, String severity2) {
        // Severity ranking order
        List<String> severityOrder = Arrays.asList("CRITICAL", "HIGH", "MEDIUM", "LOW", "NONE");

        // Find index in ranking order, or rank "beyond" known values
        int rank1 = severity1 == null ? severityOrder.size() : severityOrder.indexOf(severity1);
        int rank2 = severity2 == null ? severityOrder.size() : severityOrder.indexOf(severity2);

        // Handle unknown values by placing them after known severities
        rank1 = rank1 == -1 ? severityOrder.size() - 1 : rank1;
        rank2 = rank2 == -1 ? severityOrder.size() - 1 : rank2;

        return Integer.compare(rank1, rank2);
    }
}
